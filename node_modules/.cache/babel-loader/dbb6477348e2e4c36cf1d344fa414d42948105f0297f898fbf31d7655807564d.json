{"ast":null,"code":"\"use client\";\n\nvar _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { trendsData, generateAdditionalTrends } from \"../lib/data\";\n\n/**\n * Custom hook for fetching trends data\n * @param {Object} options - Hook options\n * @param {string} options.platform - Platform to fetch trends for\n * @param {string} options.month - Month to fetch trends for\n * @param {boolean} [options.enabled=true] - Whether to fetch data\n * @returns {Object} Hook return value\n */\nexport function useTrends({\n  platform,\n  month,\n  enabled = true\n}) {\n  _s();\n  const [trends, setTrends] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchTrends = async () => {\n    if (!enabled) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n      const platformData = trendsData[platform] || {};\n      const monthData = platformData[month] || [];\n\n      // Generate additional trends to fill the list\n      const additionalTrends = generateAdditionalTrends(platform, month, monthData.length);\n      const allTrends = [...monthData, ...additionalTrends];\n      setTrends(allTrends);\n    } catch (err) {\n      const apiError = {\n        message: err instanceof Error ? err.message : \"An unknown error occurred\",\n        code: \"FETCH_ERROR\",\n        status: 500\n      };\n      setError(apiError);\n      setTrends([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchTrends();\n  }, [platform, month, enabled]);\n  return {\n    trends,\n    loading,\n    error,\n    refetch: fetchTrends\n  };\n}\n_s(useTrends, \"NBhBEXblXzv3mcgftf7cXzDt3TQ=\");","map":{"version":3,"names":["_s","$RefreshSig$","useState","useEffect","trendsData","generateAdditionalTrends","useTrends","platform","month","enabled","trends","setTrends","loading","setLoading","error","setError","fetchTrends","Promise","resolve","setTimeout","platformData","monthData","additionalTrends","length","allTrends","err","apiError","message","Error","code","status","refetch"],"sources":["/Users/Ben/Downloads/socialTrends-22/src/hooks/useTrends.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { trendsData, generateAdditionalTrends } from \"../lib/data\"\n\n/**\n * Custom hook for fetching trends data\n * @param {Object} options - Hook options\n * @param {string} options.platform - Platform to fetch trends for\n * @param {string} options.month - Month to fetch trends for\n * @param {boolean} [options.enabled=true] - Whether to fetch data\n * @returns {Object} Hook return value\n */\nexport function useTrends({ platform, month, enabled = true }) {\n  const [trends, setTrends] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const fetchTrends = async () => {\n    if (!enabled) return\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      // Simulate API delay\n      await new Promise((resolve) => setTimeout(resolve, 800))\n\n      const platformData = trendsData[platform] || {}\n      const monthData = platformData[month] || []\n\n      // Generate additional trends to fill the list\n      const additionalTrends = generateAdditionalTrends(platform, month, monthData.length)\n      const allTrends = [...monthData, ...additionalTrends]\n\n      setTrends(allTrends)\n    } catch (err) {\n      const apiError = {\n        message: err instanceof Error ? err.message : \"An unknown error occurred\",\n        code: \"FETCH_ERROR\",\n        status: 500,\n      }\n      setError(apiError)\n      setTrends([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchTrends()\n  }, [platform, month, enabled])\n\n  return {\n    trends,\n    loading,\n    error,\n    refetch: fetchTrends,\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,EAAA,GAAAC,YAAA;AAEZ,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,wBAAwB,QAAQ,aAAa;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,OAAO,GAAG;AAAK,CAAC,EAAE;EAAAT,EAAA;EAC7D,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACP,OAAO,EAAE;IAEdI,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAM,IAAIE,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAExD,MAAME,YAAY,GAAGhB,UAAU,CAACG,QAAQ,CAAC,IAAI,CAAC,CAAC;MAC/C,MAAMc,SAAS,GAAGD,YAAY,CAACZ,KAAK,CAAC,IAAI,EAAE;;MAE3C;MACA,MAAMc,gBAAgB,GAAGjB,wBAAwB,CAACE,QAAQ,EAAEC,KAAK,EAAEa,SAAS,CAACE,MAAM,CAAC;MACpF,MAAMC,SAAS,GAAG,CAAC,GAAGH,SAAS,EAAE,GAAGC,gBAAgB,CAAC;MAErDX,SAAS,CAACa,SAAS,CAAC;IACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,MAAMC,QAAQ,GAAG;QACfC,OAAO,EAAEF,GAAG,YAAYG,KAAK,GAAGH,GAAG,CAACE,OAAO,GAAG,2BAA2B;QACzEE,IAAI,EAAE,aAAa;QACnBC,MAAM,EAAE;MACV,CAAC;MACDf,QAAQ,CAACW,QAAQ,CAAC;MAClBf,SAAS,CAAC,EAAE,CAAC;IACf,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACda,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACT,QAAQ,EAAEC,KAAK,EAAEC,OAAO,CAAC,CAAC;EAE9B,OAAO;IACLC,MAAM;IACNE,OAAO;IACPE,KAAK;IACLiB,OAAO,EAAEf;EACX,CAAC;AACH;AAAChB,EAAA,CA9CeM,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}